apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'com.jfrog.bintray'

ext {
    bintrayUser = resolveProperty( 'BINTRAY_USER', 'bintrayUser' )
    bintrayKey = resolveProperty( 'BINTRAY_KEY', 'bintrayKey' )
}

publishing {
    publications {
        mavenJava( MavenPublication ) {
            from components.java
            artifact sourcesJar
            artifact groovydocJar
            artifact javadocJar
        }
    }
}

artifactoryPublish {
    onlyIf { isMaster }
    mustRunAfter 'build'
    publications 'mavenJava'
}

artifactory {
    contextUrl = 'https://oss.jfrog.org'

    publish {
        repository {
            repoKey = 'oss-snapshot-local'
            username = bintrayUser
            password = bintrayKey
            maven = true
        }
    }
}

bintray {
    user = bintrayUser
    key = bintrayKey
    publications = ['mavenJava']
    publish = true

    pkg {
        repo = 'maven'
        name = 'gradle-node-plugin'
        desc = 'Gradle plugin for executing node scripts. Includes support for Yarn, Grunt and Gulp.'
        websiteUrl = 'https://github.com/srs/gradle-node-plugin'
        issueTrackerUrl = 'https://github.com/srs/gradle-node-plugin/issues'
        vcsUrl = 'https://github.com/srs/gradle-node-plugin.git'
        licenses = ['Apache-2.0']
        labels = ['java', 'gradle', 'groovy', 'node', 'gulp', 'grunt']
        publicDownloadNumbers = true
        githubRepo = "srs/gradle-node-plugin"

        version {
            vcsTag = "v$project.version"
            attributes = ['gradle-plugin': ["com.moowork.node:${project.group}:${project.name}",
                                            "com.moowork.grunt:${project.group}:${project.name}",
                                            "com.moowork.gulp:${project.group}:${project.name}"]]
        }
    }
}

String resolveProperty( String envVarKey, String projectPropKey )
{
    String propValue = System.getenv()[envVarKey]

    if ( propValue )
    {
        return propValue
    }

    hasProperty( projectPropKey ) ? getProperty( projectPropKey ) : null
}
